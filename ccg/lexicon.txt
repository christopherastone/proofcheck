NP :: (e -> t) -> t
S :: t

fido : NP[sg];
cheese : NP
geese : NP[pl]
barks : S \ NP
eats : S \ NP[sg], (S \ NP[sg]) / NP
eat : S \ NP[pl], (S \ NP[pl]) / NP
sees : (S \ NP[sg]) / NP
see : (S \ NP[pl]) / NP
brazil : NP
defeated : (S \ NP) / NP = \ x -> \ y -> defeated y x;
will : (S \ NP) / (S \ NP)
alice : NP[sg]
bob : NP[sg]
sat : (S \ NP) / "down" / NP = \ x -> \ y -> \ z -> satDown z x;

1. "Fido will eat cheese."
2. "Bob defeated Alice."
2a. "Bob defeated"
3. "Alice sat Bob down."
4. "defeated Alice"
5. *"defeated Alice" S
